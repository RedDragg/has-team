:root {
    --li-scale: 1.25;
    --li-scale-adj: 0.2;
    --li-pb: 0.25em;
    --fun-color: #ff00ff;
    --color-font-white: #FAF9F6;
    --background-color: #282828;
    --color-deats: rgb(255, 213, 128);

    --font-size: clamp(16px, 1vw, 25px);


    --color-red: hsl(0, 100%, 50%);
    --color-red-pink: hsl(0, 100%, 68%);
    --color-pink: hsl(350, 100%, 88%);
    --color-pink-purple: hsl(300, 100%, 61%);
    --color-purple: hsl(270, 100%, 51%);
    --color-purple-blue: hsl(240, 100%, 55%);
    --color-blue: hsl(220, 100%, 50%);
    --color-blue-cyan: hsl(200, 100%, 50%);
    --color-cyan: hsl(180, 100%, 50%);
    --color-cyan-green: hsl(150, 100%, 56%);
    --color-green: hsl(120, 100%, 50%);
    --color-green-yellow: hsl(90, 100%, 49%);
    --color-yellow: hsl(60, 100%, 50%);
    --color-yellow-orange: hsl(45, 100%, 50%);
    --color-orange: hsl(30, 100%, 50%);

    --gradient-red-pink: linear-gradient(180deg, var(--color-red) 0%, var(--color-red-pink) 100%);

    --gradient-tb-red-pink: linear-gradient(180deg, var(--color-red-pink) 0%, var(--color-pink) 100%);
    --gradient-c-pink: linear-gradient(180deg, var(--color-red-pink) 0%, var(--color-pink) 50%, var(--color-pink-purple) 100%);
    --gradient-bt-pink-purple: linear-gradient(180deg, var(--color-pink) 0%, var(--color-pink-purple) 100%);

    --gradient-tb-purple-pink: linear-gradient(180deg, var(--color-pink-purple) 0%, var(--color-purple) 100%);
    --gradient-c-purple: linear-gradient(180deg, var(--color-pink-purple) 0%, var(--color-purple) 50%, var(--color-purple-blue) 100%);
    --gradient-bt-purple-blue: linear-gradient(180deg, var(--color-purple) 0%, var(--color-purple-blue) 100%);

    --gradient-tb-purple-blue: linear-gradient(180deg, var(--color-purple-blue) 0%, var(--color-blue) 100%);
    --gradient-c-blue: linear-gradient(180deg, var(--color-purple-blue) 0%, var(--color-blue) 50%, var(--color-blue-cyan) 100%);
    --gradient-bt-blue-cyan: linear-gradient(180deg, var(--color-blue) 0%, var(--color-blue-cyan) 100%);

    --gradient-tb-blue-cyan: linear-gradient(180deg, var(--color-blue-cyan) 0%, var(--color-cyan) 100%);
    --gradient-c-cyan: linear-gradient(180deg, var(--color-blue-cyan) 0%, var(--color-cyan) 50%, var(--color-cyan-green) 100%);
    --gradient-bt-cyan-green: linear-gradient(180deg, var(--color-cyan) 0%, var(--color-cyan-green) 100%);

    --gradient-tb-cyan-green: linear-gradient(180deg, var(--color-cyan-green) 0%, var(--color-green) 100%);
    --gradient-c-green: linear-gradient(180deg, var(--color-cyan-green) 0%, var(--color-green) 50%, var(--color-green-yellow) 100%);
    --gradient-bt-green-yellow: linear-gradient(180deg, var(--color-green) 0%, var(--color-green-yellow) 100%);

    --gradient-tb-green-yellow: linear-gradient(180deg, var(--color-green-yellow) 0%, var(--color-yellow) 100%);
    --gradient-c-yellow: linear-gradient(180deg, var(--color-green-yellow) 0%, var(--color-yellow) 50%, var(--color-yellow-orange) 100%);
    --gradient-bt-yellow-orange: linear-gradient(180deg, var(--color-yellow) 0%, var(--color-yellow-orange) 100%);

    --gradient-tb-yellow-orange: linear-gradient(180deg, var(--color-yellow-orange) 0%, var(--color-orange) 100%);

}

@supports color(display-p3 0 0 0) {
    :root {
        --fun-color: color(display-p3 0 0 0);

      --color-pink: oklch(66.49% 0.2828 1.41);
      --color-red: oklch(66.49% 0.2754 27.88);
      --color-purple: oklch(100% 0.125 285);
      --color-blue: oklch(82.28% 0.1891 203.65);
      --color-cyan: oklch(75.77% 0.1398 246);
      --color-yellow: oklch(82.28% 0.1743 74.47);
      --color-orange: oklch(66.49% 0.1891 50.12);
      --color-green: oklch(82.28% 0.3075 142.24);
    }
}

@supports selector(:has(+ *)) {
    aside {
        display: none;
    }
}


* {
    margin: 0;
    padding: 0;
}


body {
    font-family: Arial, sans-serif;
    margin: 0;
    display: flex;
    justify-content: center;
    align-items: center;
    background-color: var(--background-color);
    justify-content: center;
    min-height: 100vh;

}

main {
    width: 80vw;
    /* max-width: 600px; */
    display: flex;
    flex-wrap: wrap;
    gap: 3em;
    align-items: flex-start;
    justify-content: center;
}


li {
    list-style: none;
    margin: 0;
    padding: 0;
}

details {
    min-width: 20vw;
    margin-bottom: 10px;
    border: 1px solid #ccc;
    border-radius: 5px;
    padding: 10px;
    background-color: #ffffff;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    background-color: var(--color-deats);
}

summary {
    font-weight: bold;
    cursor: pointer;
    outline: none;
}

details:nth-of-type(5){
    :is(p, ul) {
      color: red;
      list-style: none;
    }

    :is(li) :where(h1, h2, h3, h4, a){
      color: green;
    }

    :is(li) :is(h1, h2, h3, h4){
      font-weight: bold;
      color: #000;
    }
}



/* ************************************************************************* */
/* section 3 */ /* section 3 */ /* section 3 */ /* section 3 */ /* section 3 */
/* ************************************************************************* */

details:nth-of-type(3){
  display: flex;
  flex-direction: column;
    /* selecteer niet de laatste p in de details */
    p:not(:last-of-type) {
        color: green;
    }

    /* selecteer alles behalve de p */
    :not(p) {
        text-decoration: underline;
    }

    /* selecteer alle andere links die niet naar deze https connect */
    a:not([href*="https://css-tricks.com/almanac/pseudo-selectors/n/not/"]) {
        color: red;
    }

    /* selecteer alle buttons die niet disabled zijn */
    button:not([disabled]) {
        font-size: 25px;
    }

    padding-bottom: 0.5em;
}

/* ************************************************************************* */
/* section 2 */
/* section 2 */
/* section 2 */
/* section 2 */
/* section 2 */
/* ************************************************************************* */


details:nth-of-type(2) {

    ul {
        list-style: none;
        padding: 0;
        display: grid;
        font-size: var(--font-size);
    }

    li {
        transition: all cubic-bezier(0.4, 0.8, 0.71, 1.03) 180ms;
        transition-delay: var(--li-delay, 0);
        padding-block: var(--li-pb);
        margin-inline: auto;
        width: 15ch;

        p {
            display: block;
            text-align: center;
            padding: 0.5em 1em;
            background-color: var(--fun-color);
            border-radius: 0.5em;
            color: var(--color-font-white);
        }
    }

    li:hover {
        --li-pb: 0.75em;

        scale: var(--li-scale);

        cursor: pointer;
    }

    /* Select list item before the hovered one */
    li:has(+ li:hover),
    /* Select list item after the hovered one */
    li:hover+li {
        --li-pb: 0.15em;
        --li-delay: 40ms;
  
        scale: calc(var(--li-scale) - var(--li-scale-adj));
        opacity: 0.85;
      }
      
      /* When a list item is being hovered,
      select list items not hovered, or before/after hover */
    /* 
        ul:has(> :hover): This selects any <ul> element that is a direct child of the second <details> element and contains at least one child element that is currently being hovered over.
    
        li:not(:hover, :has(+ :hover), li:hover + *): This further refines the selection to <li> elements within the <ul> that meet the following criteria:
    
        :not(:hover): The <li> element itself is not being hovered over.
        :not(:has(+ :hover)): The <li> element does not have a sibling immediately following it that is being hovered over.
        :not(li:hover + *): The <li> element is not immediately followed by any element that is being hovered over.
        In summary, this selector targets <li> elements within the second <details> element's <ul> that contains a hovered child, but the <li> itself is not hovered, does not have a hovered sibling, and is not followed by a hovered element. */

    ul:has(> :hover) li:not(:hover, :has(+ :hover), li:hover + *) {
        --list-pb: 0;
        --li-delay: 60ms;

        scale: calc(1 - var(--li-scale-adj));
        opacity: 0.75;
    }
}

/* :has() support alert */
details:nth-of-type(2) aside {
    max-width: 30ch;
    padding: 1rem;
    background-color: palegoldenrod;
    border-radius: 0.5rem;
    margin-block-end: 1rem;
    line-height: 1.3;

    code {
        font-size: 1.25em;
        color: firebrick;
    }
}


/* :has formulier */
details:nth-of-type(1) {
    form {
        overflow-x: auto;

        input {
            border: 1px solid #444 !important;
            border-radius: 5px;
            height: 2rem;
            border: 1px;

            /* Input valid & invalid styling */
            &:user-invalid {
                border-right: 3px solid crimson !important;
            }

            &:valid:required {
                border-right: 3px solid forestgreen !important;
            }
        }

        button {
            background: forestgreen;
            color: #fff;
            padding: 0.5rem 1rem;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        }

        /* Hide disabled button */
        button:not(:disabled) {
            display: none;
        }

        /* Als het formulier een invalid input heeft */
        &:has(input:invalid) {
            button:disabled {
                background-color: gray;
                color: #000;
                cursor: not-allowed;
                display: inline;
            }

            /* Hide normale button */
            button:not(:disabled) {
                display: none;
            }
        }
    }
}

/* Min max details block */
details:nth-child(6) {
    input {
        height: 2rem;
        border: 1px solid #444;
        border-radius: 5px;
    }

    /* Als waarde uit range is (min & max) */
    input:out-of-range {
        background-color: rgb(255 0 0 / 25%);
        border: 2px solid crimson;
    }

    input:out-of-range+label::after {
        content: "Waarde is uit range";
    }

    /* Als waarde in range is (min & max) */
    input:user-valid:in-range {
        background-color: rgb(0 255 0 / 25%);
        border: 2px solid forestgreen;
    }

    input:user-valid:in-range+label::after {
        content: "Waarde is in range";
    }
}
details:nth-of-type(4) {

    div {
        /* Range of checked items */
        /* Yes, this could just be label:has(:checked) but we're demonstrating
        selecting a range :) */
        label:has(:checked):has(~ label :checked),
        /* so here we check if the div has a label that is checked has a checked label before it */
        label:has(:checked):not(label:has(+ label :checked)) {
            /* and after */
          border-inline-color: black;
        }

        label {
            height: 2em;
        }
    

        

        label:has(:checked):not(label:has(+ label :checked)) {
            /* als de label is gechecked en de label daarna niet gecheked is geef hem dan een border radius van .75em */
            --radius-bl: 0.75em;
            --radius-br: 0.75em;
            border-block-end-color: black;
            box-shadow: 0 4px 3px -2px hsl(0 0% 0% / 35%);
        }
        
        label:has(:checked):not(label:has(:checked) + label) {
            /* and after */
            border-block-start-color: black;
            --radius-tl: 0.75em;
            --radius-tr: 0.75em;
        }


        /* ******************************************************************************* */
        /* underneath check*//* underneath check*//* underneath check*//* underneath check */
        /* ******************************************************************************* */

        label:nth-of-type(1):has(:checked) + label:has(:checked) {
            background-image: var(--gradient-tb-red-pink);
        }

        label:nth-of-type(2):has(:checked) + label:has(:checked) {
            background-image: var(--gradient-tb-purple-pink);
        }

        label:nth-of-type(3):has(:checked) + label:has(:checked) {
            background-image: var(--gradient-tb-purple-blue);
        }

        label:nth-of-type(4):has(:checked) + label:has(:checked) {
            background-image: var(--gradient-tb-blue-cyan);
        }

        label:nth-of-type(5):has(:checked) + label:has(:checked) {
            background-image: var(--gradient-tb-cyan-green);
        }

        label:nth-of-type(6):has(:checked) + label:has(:checked) {
            background-image: var(--gradient-tb-green-yellow);
        }

        label:nth-of-type(7):has(:checked) + label:has(:checked) {
            background-image: var(--gradient-tb-yellow-orange);
        }

        /* *************************************************************** */
        /* on-top check*//* on-top check*//* on-top check*//* on-top check */
        /* *************************************************************** */

        label:nth-of-type(1):has(:checked):not(label:has(:checked) + label) {
            background-image: var(--gradient-red-pink);
        }
        
 

        
        label:nth-of-type(1):has(:checked) {
            background-color: var(--color-red);
        }
        label:nth-of-type(2):has(:checked) {
            background-color: var(--color-pink);
        }
        label:nth-of-type(3):has(:checked) {
            background-color: var(--color-purple);
        }
        label:nth-of-type(4):has(:checked) {
            background-color: var(--color-blue);
        }
        label:nth-of-type(5):has(:checked) {
            background-color: var(--color-cyan);
        }
        label:nth-of-type(6):has(:checked) {
            background-color: var(--color-green);
        }
        label:nth-of-type(7):has(:checked) {
            background-color: var(--color-yellow);
        }
        label:nth-of-type(8):has(:checked) {
            background-color: var(--color-orange);
        }

        /* ******************************************************************************* */
        /* underneath check*//* underneath check*//* underneath check*//* underneath check */     
        /* ******************************************************************************* */

        label:nth-of-type(2):has(:checked):has(~ label :checked):has(+ label :checked) {
          background-image: var(--gradient-c-pink);
        }

        label:nth-of-type(3):has(:checked):has(~ label :checked):has(+ label :checked) {
          background-image: var(--gradient-c-purple);
        }

        label:nth-of-type(4):has(:checked):has(~ label :checked):has(+ label :checked) {
          background-image: var(--gradient-c-blue);
        }

        label:nth-of-type(5):has(:checked):has(~ label :checked):has(+ label :checked) {
          background-image: var(--gradient-c-cyan);
        }

        label:nth-of-type(6):has(:checked):has(~ label :checked):has(+ label :checked) {
          background-image: var(--gradient-c-green);
        }

        label:nth-of-type(7):has(:checked):has(~ label :checked):has(+ label :checked) {
          background-image: var(--gradient-c-yellow);
        }

    }



    

    div label {
        display: flex;
        align-items: center;
        gap: 0.5em;
        padding: 0.5em;
        border: 1px solid transparent;
        border-radius: var(--radius-tl, 0) var(--radius-tr, 0) var(--radius-br, 0)
          var(--radius-bl, 0);
      }

    fieldset {
        padding: 10px;
        margin: 10px 0 10px 0;
    }

    /* Add a rule to set the --checked-color custom property based on the input value */
    input:checked {
        --checked-color: attr(value);
    }
    
}




  
  /* :has() support alert */
  aside {
    max-width: 30ch;
    padding: 1rem;
    background-color: palegoldenrod;
    border-radius: 0.5rem;
    margin-block-end: 1rem;
    line-height: 1.3;
  
    code {
      font-size: 1.25em;
      color: firebrick;
    }
  }
